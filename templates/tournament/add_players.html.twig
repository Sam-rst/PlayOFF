{# templates/tournament/add_player.html.twig #}

{% extends 'base.html.twig' %}

{% block title %}Ajouter Joueur
{% endblock %}

{% block body %}
	<div class="container">
		<div id="tournament-info" data-tournament-id="{{ tournament.id }}">

			<h1 style="margin-bottom: 1em; color: #f0a500;">Ajouter Joueur</h1>

			<div class="row">
				<div class="input-group">
					{{ form_start(add_existing_player_form) }}
					<h4>Joueur avec compte</h4>
					{{ form_row(add_existing_player_form.username, {
                    'attr': {'class': 'autocomplete-username'}
                })}}
					<button class="btn" type="submit">Ajouter</button>
					{{ form_end(add_existing_player_form, {'render_rest': false}) }}
				</div>

				<div class="input-group">
					<h4>Joueur sans compte</h4>
					{{ form_start(create_new_player_form) }}
					{{ form_row(create_new_player_form.firstname) }}
					{{ form_row(create_new_player_form.lastname) }}
					{{ form_row(create_new_player_form.email) }}
					{{ form_row(create_new_player_form.gender) }}
					<button class="btn" type="submit">Ajouter</button>
					{{ form_end(create_new_player_form, {'render_rest': false}) }}
				</div>

				<div class="input-group">
					<h4>Joueurs ajoutés</h4>
				</div>

				{# Vérifier s'il y a des joueurs ajoutés en session #}
				{% set tournamentPlayers = app.session.get('added_players_' ~ tournament.id, []) %}

				{# Vérifier s'il y a un nombre défini de joueurs par équipe #}
				{% set playersPerTeam = tournament.numberPlayersPerTeam ?? 1 %}

				<p>Nombre de joueurs par équipe : {{ tournament.numberPlayersPerTeam }}</p>

				{# Calculer le nombre total d'équipes nécessaires #}
				{% set totalTeams = (tournamentPlayers|length / playersPerTeam)|round(0, 'ceil') %}

				{# Découper les joueurs en équipes #}
				{% for i in 0..totalTeams - 1 %}
					<div class="input-group" style="padding-inline: 5em;">
						<h4>Équipe
							{{ loop.index }}</h4>
						<div class="input-group"></div>
						<ul class="player-list">
							{% for username in tournamentPlayers|slice(i * playersPerTeam, playersPerTeam) %}
								<li data-username="{{ username }}">
									<span class="player-name">{{ username }}</span>
									<button class="btn icon-btn remove-player" data-username="{{ username }}" data-index="{{ i }}" title="Supprimer">
										<i class="fa fa-trash"></i>
									</button>

									<button class="btn icon-btn" onclick="initSwap('{{ username }}', {{ i }}')" title="Échanger">
										<i class="fa fa-exchange"></i>
									</button>
								</li>
							{% endfor %}

						</ul>
					</div>

				{% else %}
					<div class="input-group">
						<p>Aucun joueur ajouté.</p>
					</div>
				{% endfor %}
			</div>


		</div>
	</div>

</div>


{# <a href="{{ path('some_route_to_create_invitation_link') }}">Créer un lien d'invitation</a> #}{% endblock %}{% block javascriptsBrut %}
{{ parent() }}
<script src="{{ asset('js/search_users.js') }}"></script>
<script src="{{ asset('js/update_player.js') }}"></script>{% endblock %}{% block styleBrut %}
<style>
	/* 64ac15 */
	*,
	*:before,
	*:after {
		box-sizing: border-box;
	}
	body {
		padding: 1em;
		font-family: "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;
		font-size: 15px;
		color: #b9b9b9;
		background-color: #e3e3e3;
	}
	h4 {
		color: #f0a500;
	}
	input,
	input[type="radio"] + label,
	input[type="checkbox"] + label:before,
	select option,
	select {
		width: 100%;
		padding: 1em;
		line-height: 1.4;
		background-color: #f9f9f9;
		border: 1px solid #e5e5e5;
		border-radius: 3px;
		-webkit-transition: 0.35s ease-in-out;
		-moz-transition: 0.35s ease-in-out;
		-o-transition: 0.35s ease-in-out;
		transition: 0.35s ease-in-out;
		transition: all 0.35s ease-in-out;
	}
	input:focus {
		outline: 0;
		border-color: #bd8200;
	}
	input:focus + .input-icon i {
		color: #f0a500;
	}
	input:focus + .input-icon:after {
		border-right-color: #f0a500;
	}
	input[type="radio"] {
		display: none;
	}
	input[type="radio"] + label,
	select {
		display: inline-block;
		min-width: 238px;
		text-align: center;
		float: left;
		border-radius: 0;
	}
	input[type="radio"] + label:first-of-type {
		border-top-left-radius: 3px;
		border-bottom-left-radius: 3px;
	}
	input[type="radio"] + label:last-of-type {
		border-top-right-radius: 3px;
		border-bottom-right-radius: 3px;
	}
	input[type="radio"] + label i {
		padding-right: 0.4em;
	}
	input[type="radio"]:checked + label,
	input:checked + label:before,
	select:focus,
	select:active {
		background-color: #f0a500;
		color: #fff;
		border-color: #bd8200;
	}
	input:checked + label:after {
		opacity: 1;
	}
	select {
		height: 3.4em;
		line-height: 2;
	}
	select:first-of-type {
		border-top-left-radius: 3px;
		border-bottom-left-radius: 3px;
	}
	select:last-of-type {
		border-top-right-radius: 3px;
		border-bottom-right-radius: 3px;
	}
	select:focus,
	select:active {
		outline: 0;
	}
	select option {
		background-color: #f0a500;
		color: #fff;
	}
	.input-group {
		margin-bottom: 1em;

		zoom: 1;
	}
	.input-group:before,
	.input-group:after {
		content: "";
		display: table;
	}
	.input-group:after {
		clear: both;
	}
	.input-group-icon {
		position: relative;
	}
	.input-group-icon input {
		padding-left: 4.4em;
	}
	.input-group-icon .input-icon {
		position: absolute;
		top: 0;
		left: 0;
		width: 3.4em;
		height: 3.4em;
		line-height: 3.4em;
		text-align: center;
		pointer-events: none;
	}
	.input-group-icon .input-icon:after {
		position: absolute;
		top: 0.6em;
		bottom: 0.6em;
		left: 3.4em;
		display: block;
		border-right: 1px solid #e5e5e5;
		content: "";
		-webkit-transition: 0.35s ease-in-out;
		-moz-transition: 0.35s ease-in-out;
		-o-transition: 0.35s ease-in-out;
		transition: 0.35s ease-in-out;
		transition: all 0.35s ease-in-out;
	}
	.input-group-icon .input-icon i {
		-webkit-transition: 0.35s ease-in-out;
		-moz-transition: 0.35s ease-in-out;
		-o-transition: 0.35s ease-in-out;
		transition: 0.35s ease-in-out;
		transition: all 0.35s ease-in-out;
	}
	.container {
		max-width: 38em;
		padding: 1em 3em 2em;
		margin: 0 auto;
		background-color: #fff;
		border-radius: 4.2px;
		box-shadow: 0 3px 10px -2px rgba(0, 0, 0, 0.2);
	}
	.row {
		zoom: 1;
	}
	.row:before,
	.row:after {
		content: "";
		display: table;
	}
	.row:after {
		clear: both;
	}
	.col-half {
		padding-right: 10px;
		float: left;
		width: 50%;
	}
	.col-half:last-of-type {
		padding-right: 0;
	}
	.col-third {
		padding-right: 10px;
		float: left;
		width: 33.33333333%;
	}
	.col-third:last-of-type {
		padding-right: 0;
	}

	.custom-textarea {
		width: 100%;
		padding: 10px;
		border: 1px solid #e5e5e5;
		border-radius: 3px;

	}

	.btn {
		display: inline-block;
		padding: 10px 20px;
		margin: 10px 0;
		background-color: #f0a500;
		color: white;
		text-align: center;
		border: none;
		border-radius: 4px;
		cursor: pointer;
		-webkit-transition: background-color 0.3s ease;
		transition: background-color 0.3s ease;
	}
	.btn:hover {
		background-color: #bd8200;
	}
	.checkbox input[type="checkbox"] {
		/* Style to visually hide the checkbox but keep it accessible */
		position: absolute;
		left: -9999px;
	}

	.checkbox label {
		position: relative;
		padding-left: 25px;
		cursor: pointer;
	}

	.checkbox label:before {
		content: '';
		position: absolute;
		left: 0;
		top: 0;
		width: 20px;
		height: 20px;
		border: 1px solid #ccc;
		background-color: #f9f9f9;
		border-radius: 3px;
	}

	.checkbox input[type="checkbox"]:checked + label:after {
		content: '';
		position: absolute;
		left: 5px;
		top: 5px;
		width: 10px;
		height: 10px;
		background-color: #f0a500;
		border-radius: 2px;
	}


	.player-name {
		flex-grow: 1;
	}

	.icon-btn {
		background: none;
		border: none;
		color: #333; /* Couleur des icônes */
		cursor: pointer;
		padding: 5px 10px;
		font-size: 16px; /* Taille des icônes */
	}

	.icon-btn:hover {
		color: #007BFF; /* Change la couleur au survol */
	}

	.icon-btn i {
		vertical-align: middle;
	}


	@media only screen and(max-width: 540px) {
		.col-half {
			width: 100%;
			padding-right: 0;
		}
	}
</style>{% endblock %}
